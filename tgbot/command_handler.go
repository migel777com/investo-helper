package tgbot

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"investohubBot/database"
	"investohubBot/robokassa"
	"strconv"
	"strings"
)

//var masterID int64 = 622108583 my
var masterID int64 = 1100797127

func HandleCommand(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *database.DBAccess) {
	server := Server{Bot: bot, Db: db}

	chatID := update.Message.Chat.ID
	message := update.Message.Text

	if chatID == masterID {

		switch message {
		case "–í–æ–ø—Ä–æ—Å—ã":
			GetMasterQuestions(server)
		default:
			q := server.Db.CheckInProgress()

			if q.Status == "In progress" {
				server.Db.AnswerQuestion(q.ID, message)

				msg := tgbotapi.NewMessage(q.ChatID, "–û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n"+
					q.Question+"\n "+
					"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: "+message)
				msg.ReplyMarkup = mainMenu
				_, _ = server.Bot.Send(msg)
				return
			}

			msg := tgbotapi.NewMessage(masterID, "Welcome Master")
			msg.ReplyMarkup = masterMenu
			_, _ = server.Bot.Send(msg)
		}

		return
	}

	if !server.Db.CheckUser(chatID) {
		if message == "/start" {
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Çüëãüèª\n\n"+
				"–ö–æ–º–∞–Ω–¥–∞ Investo Drive —Å–æ–∑–¥–∞–ª–∞ –¥–ª—è —Ç–µ–±—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ "+
				"–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –Ω–∞—à–∏–º –º–µ–Ω—Ç–æ—Ä–∞–º. \n\n"+
				"üîê –û–ø–ª–∞—Ç–∏–≤ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ 3500 —Ä—É–±–ª–µ–π (20 127 —Ç–µ–Ω–≥–µ) —Ç—ã –ø–æ–ª—É—á–∏—à—å "+
				"–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –Ω–∞—à–∏–º "+
				"–º–µ–Ω—Ç–æ—Ä–∞–º –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏.\n\n"+
				"‚úÖ –û–±—É—á–∞–π—Ç–µ—Å—å —É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ Investo Drive –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≥–∏–ø–æ—Ç–µ–∑—ã –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!\n\n"+
				"üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã: "+
				"https://drive.google.com/file/d/1DTAplzE3RfPSc9pKEEOtZIXm8WkGbMxP/view?usp=sharing")
			msg.ReplyMarkup = payment
			_, _ = server.Bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç 50$/–º–µ—Å\n\n"+
				"–ü—Ä–æ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç\". \n\n"+
				"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.")
			var pay = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonURL("–û–ø–ª–∞—Ç–∏—Ç—å", robokassa.GetURL(chatID)),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "/checkPayment"),
				),
			)
			msg.ReplyMarkup = pay
			_, _ = server.Bot.Send(msg)
		}
		fmt.Println(chatID)
		fmt.Println(message)
		return
	}

	if !server.Db.CheckSubmissionTime(chatID) {
		msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")
		msg.ReplyMarkup = payment
		_, _ = server.Bot.Send(msg)

		server.Db.DeleteUser(chatID)
		return
	}

	msg := tgbotapi.NewMessage(chatID, "")
	msg.ReplyMarkup = mainMenu
	_, _ = server.Bot.Send(msg)

	var parameter string

	if strings.Contains(message, ":") {
		array := strings.Split(message, ":")
		if array[0] == "–í–æ–ø—Ä–æ—Å" {
			message = array[0]
			for i := 1; i < len(array); i++ {
				parameter += array[i]
			}
		}
	}

	switch message {
	case "–ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã":
		GetMyQuestions(chatID, server)
	case "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
		msg = tgbotapi.NewMessage(chatID, "–ß—Ç–æ –±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ —Å–∏–º–≤–æ–ª –¥–≤–æ–µ—Ç–æ—á–∏—è "+
			"(–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞!) \"–í–æ–ø—Ä–æ—Å:\". "+
			"–í–ù–ò–ú–ê–ù–ò–ï: –í–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ –≤—ã—à–µ–æ–ø–∏—Å–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.")
		_, _ = server.Bot.Send(msg)
	case "–í–æ–ø—Ä–æ—Å":
		AskQuestion(chatID, parameter, server)
	default:
		msg = tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é")
		msg.ReplyMarkup = mainMenu
		_, _ = server.Bot.Send(msg)
	}

}

func HandleKey(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *database.DBAccess) {
	server := Server{Bot: bot, Db: db}

	chatID := update.CallbackQuery.Message.Chat.ID
	message := update.CallbackQuery.Data

	var parameter string

	if strings.Contains(message, " ") {
		array := strings.Split(message, " ")
		if array[0] == "/question" {
			message = array[0]
			parameter = array[1]
		}
	}

	if chatID == masterID {
		switch message {
		case "/question":
			q := server.Db.CheckInProgress()

			fmt.Println(q.Status)

			if q.Status == "In progress" {
				msg := tgbotapi.NewMessage(chatID, "–í—ã –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å:\n"+q.Question)
				_, _ = server.Bot.Send(msg)
				return
			}

			id, err := strconv.ParseInt(parameter, 10, 64)
			if err != nil {
				fmt.Println(err)
				return
			}

			q = server.Db.CheckQuestion(id)
			if q.Status == "Answered" {
				msg := tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å")
				_, _ = server.Bot.Send(msg)
				return
			}

			msg := tgbotapi.NewMessage(chatID, "–î–∞–π—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "+q.Question)
			_, _ = server.Bot.Send(msg)

			server.Db.StartAnswering(id)
		}

		return
	}

	if !server.Db.CheckUser(chatID) {
		if message == "/payment" {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 3500 —Ä—É–±–ª–µ–π (20 127 —Ç–µ–Ω–≥–µ).\n\n"+
				"–û–ø–ª–∞—Ç–∏—Ç—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û–ø–ª–∞—Ç–∏—Ç—å\" –≤–Ω–∏–∑—É.\n\n"+
				"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏ –Ω–∞ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\", —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É.")
			var pay = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonURL("–û–ø–ª–∞—Ç–∏—Ç—å", robokassa.GetURL(chatID)),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "/checkPayment"),
				),
			)
			msg.ReplyMarkup = pay
			_, _ = server.Bot.Send(msg)
		} else if message == "/checkPayment" {
			//fmt.Println("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")

			status := robokassa.CheckPayment(chatID)

			if status == 100 {
				msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!")
				msg.ReplyMarkup = mainMenu
				server.Db.AddNewUser(chatID, update.CallbackQuery.From.FirstName, update.CallbackQuery.From.LastName, update.CallbackQuery.From.UserName, "premium")
				_, _ = server.Bot.Send(msg)
			} else if status == 50 {
				msg := tgbotapi.NewMessage(chatID, "–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")
				_, _ = server.Bot.Send(msg)
			} else {
				msg := tgbotapi.NewMessage(chatID, "–ú—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –æ–ø–ª–∞—Ç—É.")
				_, _ = server.Bot.Send(msg)
			}

			//server.Db.AddNewUser(chatID, update.CallbackQuery.From.FirstName, update.CallbackQuery.From.LastName, update.CallbackQuery.From.UserName, "premium")
		}

		/*fmt.Println(chatID)
		fmt.Println(message)*/
		return
	}

	if !server.Db.CheckSubmissionTime(chatID) {
		msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")
		msg.ReplyMarkup = payment
		_, _ = server.Bot.Send(msg)

		server.Db.DeleteUser(chatID)
		return
	}

}
